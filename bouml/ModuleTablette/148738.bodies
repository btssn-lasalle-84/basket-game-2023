class CommunicationBluetooth
!!!149122.java!!!	getInstance(inout handler : Handler) : CommunicationBluetooth
        if(communication == null)
        {
            communication = new CommunicationBluetooth(handler);
        }
        else
        {
            communication.setHandler(handler);
        }

        return communication;
!!!149250.java!!!	CommunicationBluetooth()
        Log.d(TAG, "CommunicationBluetooth()");
        this.peripheriques = new Vector<BluetoothDevice>();
        this.socketsBluetooth = new Vector<BluetoothSocket>();
        for(int i = 0; i < NB_MODULES; i++)
        {
            this.peripheriques.add(null);
            this.socketsBluetooth.add(null);
        }
        activer();
!!!149378.java!!!	CommunicationBluetooth(inout handler : Handler)
        Log.d(TAG, "CommunicationBluetooth(handler)");
        this.peripheriques = new Vector<BluetoothDevice>();
        this.socketsBluetooth = new Vector<BluetoothSocket>();
        for(int i = 0; i < NB_MODULES; i++)
        {
            this.peripheriques.add(null);
            this.socketsBluetooth.add(null);
        }
        this.handler = handler;
        activer();
!!!149506.java!!!	setHandler(inout handler : Handler) : void
        this.handler = handler;
!!!149634.java!!!	activer() : void
        if(this.adaptateurBluetooth == null)
            this.adaptateurBluetooth = BluetoothAdapter.getDefaultAdapter();
        if(this.adaptateurBluetooth == null)
        {
            Log.e(TAG, "Bluetooth non supporté par l'appareil");
        }
        else if(!adaptateurBluetooth.isEnabled())
        {
            Log.d(TAG, "Bluetooth désactivé -> activation");
            adaptateurBluetooth.enable();
        }
        else
        {
            Log.d(TAG, "Bluetooth activé");
        }
!!!149762.java!!!	seConnecter(in nomPeripherique : String, in idModule : int) : boolean
        Log.d(TAG, "seConnecter(" + nomPeripherique + ", " + idModule + ")");
        // Activer le Bluetooth
        activer();

        // Rechercher nomPeripherique dans les appareils déjà appairés
        Set<BluetoothDevice> peripheriquesAppaires = adaptateurBluetooth.getBondedDevices();
        if(peripheriquesAppaires.size() > 0)
        {
            Log.d(TAG, "Nb appareils appairés : " + peripheriquesAppaires.size());
            for(BluetoothDevice appareil: peripheriquesAppaires)
            {
                if(appareil.getName().contains(nomPeripherique))
                {
                    if(peripheriques.get(idModule) == null)
                        this.peripheriques.set(idModule, appareil);
                    break;
                }
            }
        }
        if(peripheriques.get(idModule) == null)
        {
            Log.e(TAG, "Appareil Bluetooth " + nomPeripherique + " non trouvé !");
            return false;
        }
        else
        {
            Log.d(TAG,
                  "Appareil Bluetooth " + peripheriques.get(idModule).getName() +
                    " trouvé : " + peripheriques.get(idModule).getAddress());
            return creerSocket(idModule);
        }
!!!172074.java!!!	estConnecte(in idModule : int) : boolean
        if (socketsBluetooth.get(idModule) != null && socketsBluetooth.get(idModule).isConnected()) {
            return true;
        }
        return false;
!!!149890.java!!!	creerSocket(in idModule : int) : boolean
        Log.d(TAG, "creerSocket(" + idModule + ")");
        // Créer le canal Bluetooth
        try
        {
            this.socketsBluetooth.set(
              idModule,
              peripheriques.get(idModule).createRfcommSocketToServiceRecord(identifiantUUID));
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la creation du canal");
            return false;
        }
        // Connecter le canal
        try
        {
            this.socketsBluetooth.get(idModule).connect();
            if(idModule == ID_MODULE_DETECTION)
            {
                inputStream = this.socketsBluetooth.get(idModule).getInputStream();
            }
            if(handler != null)
            {
                Log.d(TAG, "Message handler");
                Message messageHandler = new Message();
                messageHandler.what    = CONNEXION_BLUETOOTH;
                messageHandler.obj     = peripheriques.get(idModule).getName();
                handler.sendMessage(messageHandler);
            }
            if(idModule == ID_MODULE_DETECTION)
            {
                // Démarrer la reception
                recevoir();
            }
            Log.d(TAG, "Canal Bluetooth connecté");
            return true;
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la connexion du canal");
            try
            {
                this.socketsBluetooth.get(idModule).close();
            }
            catch(IOException closeException)
            {
                Log.e(TAG, "Erreur lors de la fermeture du socket");
            }
            return false;
        }
!!!150018.java!!!	seDeconnecter(in idModule : int) : void
        Log.d(TAG, "seDeconnecter(" + idModule + ")");
        if(peripheriques.get(idModule) == null)
            return;
        // Fermer les connexions et le socket
        try
        {
            if(idModule == ID_MODULE_DETECTION)
            {
                if(inputStream != null)
                {
                    inputStream.close();
                }
            }
            if(this.socketsBluetooth.get(idModule) != null)
            {
                this.socketsBluetooth.get(idModule).getOutputStream().close();
                this.socketsBluetooth.get(idModule).close();
            }
            if(handler != null)
            {
                Message messageHandler = new Message();
                messageHandler.what    = DECONNEXION_BLUETOOTH;
                messageHandler.obj     = peripheriques.get(idModule).getName();
                handler.sendMessage(messageHandler);
            }
        }
        catch(IOException e)
        {
            Log.e(TAG, "Erreur lors de la fermeture des connexions.");
        }
!!!150146.java!!!	envoyer(in message : String, in idModule : int) : void
        if(this.socketsBluetooth.get(idModule) != null && this.socketsBluetooth.get(idModule).isConnected())
        {
            new Thread() {
                @Override
                public void run()
                {
                    try
                    {
                        Log.d(TAG, "envoyer() " + message);
                        socketsBluetooth.get(idModule).getOutputStream().write(message.getBytes());
                        socketsBluetooth.get(idModule).getOutputStream().flush();
                    }
                    catch(IOException e)
                    {
                        Log.e(TAG, "Erreur lors de l'envoi de données");
                    }
                }
            }.start();
        }
!!!150274.java!!!	recevoir() : void
        Log.d(TAG, "recevoir()");
        filExecutionReception = new Thread(new Runnable() {
            @Override
            public void run()
            {
                Log.d(TAG, "recevoir() thread démarré");
                while(socketsBluetooth.get(ID_MODULE_DETECTION).isConnected())
                {
                    try
                    {
                        byte[] donnees = new byte[32];
                        int  n = inputStream.read(donnees);
                        if(n > 0)
                        {
                            if(handler != null)
                            {
                                Message messageHandler = new Message();
                                messageHandler.what    = RECEPTION_BLUETOOTH;
                                messageHandler.obj     = new String(Arrays.copyOfRange(donnees,0,n));
                                handler.sendMessage(messageHandler);
                            }
                        }
                    }
                    catch(IOException e)
                    {
                        Log.e(TAG, "Erreur lors de la réception de données");
                        seDeconnecter(ID_MODULE_DETECTION);
                    }
                }
                Log.d(TAG, "recevoir() thread arrêté");
            }
        });
        filExecutionReception.start();

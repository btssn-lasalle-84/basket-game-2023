class PartieSuivi
!!!144042.java!!!	onCreate(inout savedInstanceState : Bundle) : void
        super.onCreate(savedInstanceState);
        setContentView(R.layout.partie_suivi);
        Log.d(TAG, "onCreate()");

        recupererParametresPartie();
        afficherNomEquipe1();
        afficherNomEquipe2();
        creerBoutonArreterPartie();
        creerBoutonConnexionModuleDetection();
        creerBoutonConnexionModuleSignalisation();
        creerBoutonConnexionModuleEcran();
        initialiserHandler();
!!!150402.java!!!	onStart() : void
        super.onStart();
        Log.d(TAG, "onStart()");
        initialiserCompteurTempsTour();
        connecterModules();
!!!150530.java!!!	onResume() : void
        super.onResume();
        Log.d(TAG, "onResume()");
!!!150658.java!!!	onPause() : void
        super.onPause();
        Log.d(TAG, "onPause()");
!!!150786.java!!!	onStop() : void
        communicationBluetooth.seDeconnecter(CommunicationBluetooth.ID_MODULE_DETECTION);
        super.onStop();
        Log.d(TAG, "onStop()");
!!!158378.java!!!	initialiserCompteurTempsTour() : void
        progressBarTempsRestantTour = (ProgressBar)findViewById(R.id.progressBarTempsRestantTour);
        compteurTempsTour           = new Timer();

        tempsRestantTour = partie.getTempsMaxTour();
        Log.d(TAG, "initialiserCompteurTempsTour() tempsRestantTour = " + tempsRestantTour);
        progressBarTempsRestantTour.setMax(tempsRestantTour);
        progressBarTempsRestantTour.setProgress(tempsRestantTour);
        progressBarTempsRestantTour.setProgressTintList(ColorStateList.valueOf(Color.GREEN));

        compterTempsRestantTour();
!!!158506.java!!!	compterTempsRestantTour() : void
        tacheCompteurTempsTour = new TimerTask() {
            public void run()
            {
                tempsRestantTour--;
                if (tempsRestantTour <= 0) {
                    tempsRestantTour = partie.getTempsMaxTour();
                    runOnUiThread(new Runnable() {
                        public void run() {
                            progressBarTempsRestantTour.setProgressTintList(ColorStateList.valueOf(Color.GREEN));
                        }
                    });
                }
                runOnUiThread(new Runnable() {
                    public void run()
                    {
                        progressBarTempsRestantTour.setProgress(tempsRestantTour);

                        if (tempsRestantTour <= Partie.SEUIL_TEMPS_RESTANT) {
                            progressBarTempsRestantTour.setProgressTintList(ColorStateList.valueOf(Color.RED));
                        }
                    }
                });
            }
        };

        // tâche périodique
        compteurTempsTour.schedule(tacheCompteurTempsTour, 1000, 1000);
!!!165034.java!!!	recupererParametresPartie() : void
        intentDonneesPartieSuivi = getIntent();
        Equipe equipe1           = (Equipe)intentDonneesPartieSuivi.getSerializableExtra("equipe1");
        if(equipe1 != null)
        {
            Log.d(TAG, "onCreate() equipe1 = " + equipe1.getNomEquipe());
        }
        Equipe equipe2 = (Equipe)intentDonneesPartieSuivi.getSerializableExtra("equipe2");
        if(equipe2 != null)
        {
            Log.d(TAG, "onCreate() equipe2 = " + equipe2.getNomEquipe());
        }

        int tempsMaxTour =
                intentDonneesPartieSuivi.getIntExtra("tempsMaxTour", Partie.TEMPS_MAX_TOUR);
        Log.d(TAG, "onCreate() tempsMaxTour = " + tempsMaxTour);
        int nbPaniers = intentDonneesPartieSuivi.getIntExtra("nbPaniers", Partie.NB_PANIERS);
        Log.d(TAG, "onCreate() nbPaniers = " + nbPaniers);
        int nbManches =
                intentDonneesPartieSuivi.getIntExtra("nbManches", Partie.NB_MANCHES_GAGNANTES);
        Log.d(TAG, "onCreate() nbManches = " + nbManches);

        partie = new Partie(equipe1, equipe2);
        partie.setTempsMaxTour(tempsMaxTour);
        partie.setNbPaniers(nbPaniers);
        partie.setNbManchesGagnantes(nbManches);
!!!144170.java!!!	afficherNomEquipe1() : void
        TextView affichageNomEquipe1 = findViewById(R.id.affichageNomEquipe1);
        if(!partie.getEquipe1().getNomEquipe().isEmpty())
        {
            Log.d(TAG, "afficherNomEquipe1() equipe1 = " + partie.getEquipe1().getNomEquipe());
            String nomEquipe1 = partie.getEquipe1().getNomEquipe();
            affichageNomEquipe1.setText(nomEquipe1);
        }
        else
        {
            String nomEquipe1 = EQUIPE_1; // Ajout de la valeur "Rouge" par défaut
            Log.d(TAG, "afficherNomEquipe1() equipe1 = " + nomEquipe1);
            affichageNomEquipe1.setText(nomEquipe1);
            partie.getEquipe1().setNomEquipe(nomEquipe1);
        }
!!!144298.java!!!	afficherNomEquipe2() : void
        TextView affichageNomEquipe2 = findViewById(R.id.affichageNomEquipe2);
        if(!partie.getEquipe2().getNomEquipe().isEmpty())
        {
            Log.d(TAG, "afficherNomEquipe1() equipe2 = " + partie.getEquipe2().getNomEquipe());
            String nomEquipe2 = partie.getEquipe2().getNomEquipe();
            affichageNomEquipe2.setText(nomEquipe2);
        }
        else
        {
            String nomEquipe2 = EQUIPE_2; // Ajout de la valeur "Jaune" par défaut
            Log.d(TAG, "afficherNomEquipe2() equipe2 = " + nomEquipe2);
            affichageNomEquipe2.setText(nomEquipe2);
            partie.getEquipe2().setNomEquipe(nomEquipe2);
        }
!!!144426.java!!!	creerBoutonArreterPartie() : void
        Button boutonArreterPartie = findViewById(R.id.boutonArreterPartie);
        boutonArreterPartie.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v)
            {
                arreterPartie();
            }
        });
!!!150914.java!!!	creerBoutonConnexionModuleDetection() : void
        final boolean[] moduleConnecte = {false};
        ImageButton boutonConnexionModuleDetection = findViewById(R.id.boutonConnexionModuleDetection);
        boutonConnexionModuleDetection.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v)
            {
                if(!moduleConnecte[0])
                {
                    communicationBluetooth.seConnecter(CommunicationBluetooth.NOM_MODULE_DETECTION, CommunicationBluetooth.ID_MODULE_DETECTION);

                    boutonConnexionModuleDetection.setBackgroundTintList(ColorStateList.valueOf(Color.GREEN));
                    moduleConnecte[0] = true;
                } else {
                    communicationBluetooth.seDeconnecter(CommunicationBluetooth.ID_MODULE_DETECTION);
                    boutonConnexionModuleDetection.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
                    moduleConnecte[0] = false;
                }
            }
        });
!!!151042.java!!!	creerBoutonConnexionModuleSignalisation() : void
        final boolean[] moduleConnecte = {false};
        ImageButton boutonConnexionModuleSignalisation = findViewById(R.id.boutonConnexionModuleSignalisation);
        boutonConnexionModuleSignalisation.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v)
            {
                if(!moduleConnecte[0])
                {
                    communicationBluetooth.seConnecter(CommunicationBluetooth.NOM_MODULE_SIGNALISATION, CommunicationBluetooth.ID_MODULE_SIGNALISATION);
                    boutonConnexionModuleSignalisation.setBackgroundTintList(ColorStateList.valueOf(Color.GREEN));
                    moduleConnecte[0] = true;
                } else {
                    communicationBluetooth.seDeconnecter(CommunicationBluetooth.ID_MODULE_SIGNALISATION);
                    boutonConnexionModuleSignalisation.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
                    moduleConnecte[0] = false;
                }
            }
        });
!!!151170.java!!!	creerBoutonConnexionModuleEcran() : void
        final boolean[] moduleConnecte = {false};
        ImageButton boutonConnexionModuleEcran = findViewById(R.id.boutonConnexionModuleEcran);
        boutonConnexionModuleEcran.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v)
            {
                if(!moduleConnecte[0])
                {
                    communicationBluetooth.seConnecter(CommunicationBluetooth.NOM_MODULE_ECRAN, CommunicationBluetooth.ID_MODULE_ECRAN);
                    boutonConnexionModuleEcran.setBackgroundTintList(ColorStateList.valueOf(Color.GREEN));
                    moduleConnecte[0] = true;
                } else {
                    communicationBluetooth.seDeconnecter(CommunicationBluetooth.ID_MODULE_ECRAN);
                    boutonConnexionModuleEcran.setBackgroundTintList(ColorStateList.valueOf(Color.RED));
                    moduleConnecte[0] = false;
                }
            }
        });
!!!165162.java!!!	arreterCompteur() : void
        if (tacheCompteurTempsTour != null)
        {
            tacheCompteurTempsTour.cancel();
            tacheCompteurTempsTour = null;
        }
!!!165290.java!!!	reinitialiserCompteur() : void
        tempsRestantTour = partie.getTempsMaxTour();
        progressBarTempsRestantTour.setProgress(tempsRestantTour);
        progressBarTempsRestantTour.setProgressTintList(ColorStateList.valueOf(Color.GREEN));
!!!151298.java!!!	connecterModules() : void
        Log.d(TAG, "connecterModules()");
        if(communicationBluetooth == null) {
            communicationBluetooth = CommunicationBluetooth.getInstance(handler);
        }
        if(communicationBluetooth != null) {
            // Connecter les trois modules
            communicationBluetooth.seConnecter(CommunicationBluetooth.NOM_MODULE_DETECTION, CommunicationBluetooth.ID_MODULE_DETECTION);
        }
!!!151426.java!!!	demarrerPartie() : void
        Log.d(TAG, "demarrerPartie()");
        fabriquerTrameDebutPartie();
!!!144554.java!!!	arreterPartie() : void
        arreterCompteur();
        reinitialiserCompteur();
        fabriquerTrameArretPartie();

        Log.d(TAG, "arreterPartie()");
        Intent intent = new Intent(PartieSuivi.this, PartieInterrompue.class);
        startActivity(intent);
!!!151554.java!!!	initialiserHandler() : void
        Log.d(TAG, "initialiserHandler()");
        handler = new Handler() {
            public void handleMessage(Message message) {
                super.handleMessage(message);
                //Log.d(TAG, "handleMessage() what = " + message.what);

                switch (message.what)
                {
                    case CommunicationBluetooth.CONNEXION_BLUETOOTH:
                        Log.d(TAG, "handleMessage() CONNEXION_BLUETOOTH " + message.obj.toString());
                        if(message.obj.toString().equals(CommunicationBluetooth.NOM_MODULE_DETECTION))
                        {
                            demarrerPartie();
                        }
                        break;
                    case CommunicationBluetooth.RECEPTION_BLUETOOTH:
                        Log.d(TAG, "handleMessage() RECEPTION_BLUETOOTH " + message.obj.toString());
                        break;
                    case CommunicationBluetooth.DECONNEXION_BLUETOOTH:
                        Log.d(TAG, "handleMessage() DECONNEXION_BLUETOOTH " + message.obj.toString());
                        break;
                    default:
                        Log.e(TAG, "handleMessage() what = " + message.what + " !!!");
                }


            }
        };
        Log.d(TAG, "initialiserHandler() handler = " + handler);
!!!151682.java!!!	fabriquerTrameDebutPartie() : void
        communicationBluetooth.envoyer(CommunicationBluetooth.DELIMITEUR_DEBUT_TRAME + CommunicationBluetooth.DELIMITEUR_CHAMPS_TRAME +
                        CommunicationBluetooth.Type.START + CommunicationBluetooth.DELIMITEUR_CHAMPS_TRAME + "1" +
                        CommunicationBluetooth.DELIMITEUR_CHAMPS_TRAME +
                        CommunicationBluetooth.DELIMITEUR_FIN_TRAME,
                        CommunicationBluetooth.ID_MODULE_DETECTION);
!!!151810.java!!!	fabriquerTrameArretPartie() : void
        communicationBluetooth.envoyer(CommunicationBluetooth.DELIMITEUR_DEBUT_TRAME + CommunicationBluetooth.DELIMITEUR_CHAMPS_TRAME +
                        CommunicationBluetooth.Type.STOP + CommunicationBluetooth.DELIMITEUR_CHAMPS_TRAME + "1" +
                        CommunicationBluetooth.DELIMITEUR_CHAMPS_TRAME +
                        CommunicationBluetooth.DELIMITEUR_FIN_TRAME,
                CommunicationBluetooth.ID_MODULE_DETECTION);

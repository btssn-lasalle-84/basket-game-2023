class Basketgame
!!!134570.cpp!!!	Basketgame(inout parent : QWidget = 0)
    qDebug() << Q_FUNC_INFO;
    equipes.push_back(new Equipe("Rouge", this));
    equipes.push_back(new Equipe("Jaune", this));
    initialiserIHM();
    initialiserEvenements();
    initialiserCommunication();
#ifdef TEST_BASKETGAME
    attribuerRaccourcisClavier();
#endif
!!!134698.cpp!!!	~Basketgame()
    delete ui;
    qDebug() << Q_FUNC_INFO;
!!!143146.cpp!!!	demarrerSeance() : void
    if(!etatSeance && ui->ecrans->currentIndex() == Basketgame::Ecran::Partie)
    {
        etatSeance = true;
        demarrerPartie();
    }
!!!143274.cpp!!!	terminerSeance() : void
    if(puissance4->estVainqueur())
    {
        etatSeance = false;
        initialiserDureeTour();
        ui->tempsTour->setText("00:00:00");
        minuteurTour->stop();
        qDebug() << Q_FUNC_INFO << "nbPionsJoues" << nbPionsJoues
                 << "estVainqueur" << puissance4->estVainqueur();
    }
    else if(nbPionsJoues == NB_PIONS)
    {
        etatSeance = false;
        initialiserDureeTour();
        ui->tempsTour->setText("00:00:00");
        minuteurTour->stop();
    }
!!!135978.cpp!!!	demarrerPartie() : void
    if(etatSeance)
    {
        qDebug() << Q_FUNC_INFO;
        initialiserPartie();
        initialiserDureeTour();
        initialiserParametreEquipe();
        demarrerChronometrageTour();
        afficherPuissance4();
    }
!!!131458.cpp!!!	jouerPion(in colonne : int) : void
    int ligne = puissance4->placerPion(colonne);
    if(ligne != -1)
    {
        afficherUnJeton(ligne, colonne);
        afficherScoreEquipe();
        puissance4->verifierPlateau();
        terminerSeance();
        afficherTourEquipe();
    }
!!!135082.cpp!!!	afficherEcran(in ecran : Basketgame::Ecran) : void
    ui->ecrans->setCurrentIndex(ecran);
!!!135210.cpp!!!	afficherEcranAcceuil() : void
    qDebug() << Q_FUNC_INFO;
    afficherEcran(Basketgame::Ecran::Accueil);
!!!135338.cpp!!!	afficherEcranPartie() : void
    qDebug() << Q_FUNC_INFO;
    afficherEcran(Basketgame::Ecran::Partie);
!!!142762.cpp!!!	chronometrerTour() : void
    // Voir aussi : QElapsedTimer
    QTime tempsEcoule = tempsTour->addSecs(-1);
    tempsTour->setHMS(tempsEcoule.hour(),
                      tempsEcoule.minute(),
                      tempsEcoule.second());
    // qDebug() << Q_FUNC_INFO << "tempsTours" <<
    // tempsTours->toString("hh:mm:ss");
    ui->tempsTour->setText(tempsTour->toString("hh:mm:ss"));

    if(*tempsTour == QTime(0, 0))
    {
        minuteurTour->stop();
        initialiserDureeTour();
        ui->tempsTour->setText(tempsTour->toString("hh:mm:ss"));
        minuteurTour->start(TIC_HORLOGE);
        qDebug() << Q_FUNC_INFO << "estEquipeRouge"
                 << puissance4->estEquipeRouge();
        if(puissance4->estEquipeRouge())
        {
            ui->labelVisualisationEquipeRouge->setStyleSheet(
              "background-color: transparent; color: black;");
            ui->labelVisualisationEquipeJaune->setStyleSheet(
              "background-color: yellow; color: black;");
            puissance4->setTourEquipe(false);
        }
        else
        {
            ui->labelVisualisationEquipeJaune->setStyleSheet(
              "background-color: transparent; color: black;");
            ui->labelVisualisationEquipeRouge->setStyleSheet(
              "background-color: red; color: black;");
            puissance4->setTourEquipe(true);
        }
    }
!!!143018.cpp!!!	fermerApplication() : void
    this->close();
!!!142890.cpp!!!	simulerPion() : void
    if(!etatSeance)
        return;
    // simule un pion dans une colonne
    int colonne = randInt(0, NB_COLONNES - 1);
    // et le joue
    jouerPion(colonne);
!!!136106.cpp!!!	initialiserIHM() : void
    ui->setupUi(this);

#ifdef PLEIN_ECRAN_RPI
    showFullScreen();
#else
    resize(qApp->desktop()->availableGeometry(this).width(),
           qApp->desktop()->availableGeometry(this).height());
    setMinimumSize(qApp->desktop()->availableGeometry(this).width(),
                   qApp->desktop()->availableGeometry(this).height());
    // showMaximized();
#endif
    afficherEcranAcceuil();
!!!136234.cpp!!!	initialiserEvenements() : void
    // le minuteur
    connect(minuteurTour, SIGNAL(timeout()), this, SLOT(chronometrerTour()));
!!!131586.cpp!!!	initialiserPartie() : void
    nbPionsJoues = 0;
    equipes[Rouge]->setScore(0);
    equipes[Jaune]->setScore(0);
    puissance4->initialiserPlateau();
!!!143530.cpp!!!	initialiserDureeTour() : void
    if(tempsTour != nullptr)
    {
        delete tempsTour;
        tempsTour = nullptr;
    }
    tempsTour = new QTime(0, 0, TEMPS_TOUR);
!!!131714.cpp!!!	initialiserParametreEquipe() : void
    ui->labelVisualisationEquipeRouge->setText(equipes[Rouge]->getNom());
    ui->labelVisualisationEquipeJaune->setText(equipes[Jaune]->getNom());
    ui->affichageTotalPanierE1->display(QString::number(0));
    ui->affichageTotalPanierE2->display(QString::number(0));
    ui->labelVisualisationEquipeJaune->setStyleSheet(
      "background-color: transparent; color: black;");
    ui->labelVisualisationEquipeRouge->setStyleSheet(
      "background-color: red; color: black;");
!!!131842.cpp!!!	initialiserCommunication() : void
    /**
     * @todo Connecter les signaux/slots entre Communication et Basketgame puis
     * demarrer la communication
     */
!!!151722.cpp!!!	demarrerChronometrageTour() : void
    ui->tempsTour->setText(tempsTour->toString("hh:mm:ss"));
    qDebug() << Q_FUNC_INFO << "tempsTour" << tempsTour->toString("hh:mm:ss");
    minuteurTour->start(TIC_HORLOGE);
!!!131970.cpp!!!	afficherPuissance4() : void
    qDebug() << Q_FUNC_INFO << "\"" << PLATEAU_7 << "\"";
    ui->labelVisualisationPlateau->setPixmap(QPixmap(PLATEAU_7));
!!!143786.cpp!!!	afficherUnJeton(in ligne : int, in colonne : int) : void
    if(ligne < 0 || ligne >= NB_LIGNES)
        return;
    if(colonne < 0 || colonne >= NB_COLONNES)
        return;

    QImage  jetonRouge(JETON_ROUGE);
    QImage  jetonJaune(JETON_JAUNE);
    QPixmap plateauPuissance4 = ui->labelVisualisationPlateau->pixmap()->copy();
    QPainter p(&plateauPuissance4);

    qDebug() << Q_FUNC_INFO << "rouge" << puissance4->estEquipeRouge()
             << "ligne" << ligne << "colonne" << colonne;
    if(puissance4->estEquipeRouge())
    {
        p.drawImage(QPoint(DEPLACEMENT_X + (colonne * TAILLE_JETON),
                           DEPLACEMENT_Y - (ligne * TAILLE_JETON)),
                    jetonRouge);
        p.end();
        ui->labelVisualisationPlateau->setPixmap(plateauPuissance4);
    }
    else
    {
        p.drawImage(QPoint(DEPLACEMENT_X + (colonne * TAILLE_JETON),
                           DEPLACEMENT_Y - (ligne * TAILLE_JETON)),
                    jetonJaune);
        p.end();
        ui->labelVisualisationPlateau->setPixmap(plateauPuissance4);
    }
!!!143914.cpp!!!	afficherTourEquipe() : void
    minuteurTour->stop();
    initialiserDureeTour();
    ui->tempsTour->setText(tempsTour->toString("hh:mm:ss"));

    if(!etatSeance)
        return;

    minuteurTour->start(TIC_HORLOGE);

    if(puissance4->estEquipeRouge())
    {
        ui->labelVisualisationEquipeRouge->setStyleSheet(
          "background-color: transparent; color: black;");
        ui->labelVisualisationEquipeJaune->setStyleSheet(
          "background-color: yellow; color: black;");
        puissance4->setTourEquipe(false);
    }
    else
    {
        ui->labelVisualisationEquipeJaune->setStyleSheet(
          "background-color: transparent; color: black;");
        ui->labelVisualisationEquipeRouge->setStyleSheet(
          "background-color: red; color: black;");
        puissance4->setTourEquipe(true);
    }
!!!144042.cpp!!!	afficherScoreEquipe() : void
    if(puissance4->estEquipeRouge())
    {
        equipes[Rouge]->incrementerScore();
        ui->affichageTotalPanierE1->display(
          QString::number(equipes[Rouge]->getScore()));
    }
    else
    {
        equipes[Jaune]->incrementerScore();
        ui->affichageTotalPanierE2->display(
          QString::number(equipes[Jaune]->getScore()));
    }
    nbPionsJoues++;
!!!144298.cpp!!!	attribuerRaccourcisClavier() : void
    // les touches pour "jouer" avec le clavier
    QAction* quitter = new QAction(this);
    quitter->setShortcut(QKeySequence(QKeySequence(Qt::Key_Q)));
    addAction(quitter);
    connect(quitter, SIGNAL(triggered()), this, SLOT(fermerApplication()));
    QAction* simulationConnexion = new QAction(this);
    simulationConnexion->setShortcut(QKeySequence(Qt::Key_C));
    addAction(simulationConnexion);
    connect(simulationConnexion,
            SIGNAL(triggered()),
            this,
            SLOT(afficherEcranPartie()));
    QAction* demarrageSeance = new QAction(this);
    demarrageSeance->setShortcut(QKeySequence(Qt::Key_S));
    addAction(demarrageSeance);
    connect(demarrageSeance, SIGNAL(triggered()), this, SLOT(demarrerSeance()));
    QAction* simulationPion = new QAction(this);
    simulationPion->setShortcut(QKeySequence(Qt::Key_Space));
    addAction(simulationPion);
    connect(simulationPion, SIGNAL(triggered()), this, SLOT(simulerPion()));
#ifdef TEST_ALIGNEMENT
    QAction* verificationPuissance4 = new QAction(this);
    verificationPuissance4->setShortcut(QKeySequence(Qt::Key_V));
    addAction(verificationPuissance4);
    connect(verificationPuissance4,
            SIGNAL(triggered()),
            puissance4,
            SLOT(testUnitaireVerifierPlateau()));
#endif
!!!144170.cpp!!!	randInt(in min : int, in max : int) : int
    return qrand() % ((max + 1) - min) + min;
